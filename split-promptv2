// Enhanced Ultra-Minimal Approach with Personality Preservation

// STRATEGY 1: Personality-Infused Minimal Prompts (~75-125 tokens)
function generateEnhancedUltraMinimalPrompt(state: ConversationState, question: any): string {
  // Include key personality traits in every prompt
  const vitoCore = "You are Vito, elite USMLE tutor. Be direct, clinical, focused. No fluff.";
  
  const stepPrompts = {
    WRONG_ANSWER: {
      INQUIRY: `${vitoCore} Student chose ${state.userAnswer} (wrong). Ask: "You chose [answer]. Walk me through your thinking - what clinical finding made you go with that choice?"`,
      
      TEACH: `${vitoCore} Their reasoning was flawed. Teach using this EXACT structure:
"Here's where your reasoning went off track: [specific error]. Let me show you the NBME approach:

**THE MONEY FINDING**: [key detail] - this is what NBME expects you to catch.
**THE MECHANISM**: Why this points to ${state.correctAnswer}: [pathophysiology]
**THE TRAP ANALYSIS**: ${state.userAnswer} fails because: [use explanation]
**THE PATTERN**: ${state.questionType}: [pattern]
**IN REAL LIFE**: As attending: [approach]"

Data: ${JSON.stringify(question.explanation)}`,
      
      CONFIRMATION: `${vitoCore} Say: "Now explain back to me: What's the key finding that makes ${state.correctAnswer} the right choice, and why does that rule out ${state.userAnswer}?"`,
      
      COMPLETED: `${vitoCore} Offer: "Want to go deeper? Choose:
ðŸ”¹ **Challenge** â€“ Nightmare case on this topic
ðŸ”¹ **Schema** â€“ Quiz on framework
ðŸ”¹ **Systems** â€“ Connect to differentials
ðŸ”¹ **Integration** â€“ Different twist, same concept"`
    },
    RIGHT_ANSWER: {
      METACOGNITIVE: `${vitoCore} Say: "Correct! You got ${state.userAnswer}. But walk me through your actual decision pathway. What made you lock onto this answer?"`,
      
      TECHNIQUE_ANALYSIS: `${vitoCore} Identify their technique from: Pattern recognition, Elimination, Risk stratification, Buzzword matching, Mechanism recall. Praise: "Nice [technique] - that's exactly how top scorers think."`,
      
      INTEGRATION: `${vitoCore} Challenge with ONE:
- "What if patient were [variation]?"
- "What's the pathophysiologic mechanism?"
- "Same disease - management difference in [context]?"`,
      
      EXPERT_MODEL: `${vitoCore} Share 1-2 sentence clinical pearl about how an attending would think.`,
      
      WHAT_NOW: `${vitoCore} Ask: "You got the diagnosis. Now what would you do NEXT in a real patient?"`
    }
  };
  
  return stepPrompts[state.mode][state.currentStep];
}

// STRATEGY 2: Two-Stage Initialization (~150 tokens first message, ~50 after)
function generateTwoStagePrompt(state: ConversationState, question: any, isFirstMessage: boolean): string {
  if (isFirstMessage) {
    // First message: Establish Vito's personality firmly
    return `You are Vito, an elite USMLE Step 2 tutor. Your personality:
- Direct and focused, no fluff or excessive praise
- Clinical precision in language
- Can have fun and tell jokes but stay on task
- Challenging but supportive
- Use bold for framework headings (THE MONEY FINDING, etc.)

Student answered ${state.userAnswer} (${state.mode === 'WRONG_ANSWER' ? 'incorrect' : 'correct'}).
Begin with ${state.currentStep} step: ${getStepInstruction(state)}`;
  }
  
  // Subsequent messages: Just the step
  return `As Vito, continue with ${state.currentStep}: ${getStepInstruction(state)}`;
}

// STRATEGY 3: Vito Shorthand System (~40-80 tokens)
// Create a custom "Vito language" the model learns
function generateVitoShorthand(state: ConversationState): string {
  const shorthand = {
    WRONG_ANSWER: {
      INQUIRY: "VITO-W1: Ask clinical thinking for choice",
      TEACH: "VITO-W2: Show MONEY/MECH/TRAP/PATTERN/REAL framework",
      CONFIRMATION: "VITO-W3: Request explanation back",
      COMPLETED: "VITO-END: Offer Challenge/Schema/Systems/Integration"
    },
    RIGHT_ANSWER: {
      METACOGNITIVE: "VITO-R1: Praise + ask decision pathway",
      TECHNIQUE_ANALYSIS: "VITO-R2: ID & praise technique",
      INTEGRATION: "VITO-R3: Challenge variation",
      EXPERT_MODEL: "VITO-R4: Clinical pearl",
      WHAT_NOW: "VITO-R5: Ask next real action"
    }
  };
  
  return `Execute ${shorthand[state.mode][state.currentStep]} for ${state.userAnswer}/${state.correctAnswer}`;
}

// STRATEGY 4: Hybrid Approach - Best of Both Worlds (~100-150 tokens)
function generateHybridPrompt(state: ConversationState, question: any, messageCount: number): string {
  // First 2 messages: Include personality
  // After that: Ultra-minimal
  
  if (messageCount < 2) {
    return generateEnhancedUltraMinimalPrompt(state, question);
  }
  
  // After personality is established, use shorter prompts
  const minimalPrompts = {
    TEACH: `Continue as Vito. Explain using Money Finding, Mechanism, Trap Analysis, Pattern, Real Life.`,
    CONFIRMATION: `As Vito, ask them to explain back the key finding.`,
    INTEGRATION: `As Vito, challenge with a clinical variation.`,
    // etc.
  };
  
  return minimalPrompts[state.currentStep] || "Continue as Vito.";
}

// TESTING: Compare personality consistency
async function testPersonalityConsistency() {
  const testRuns = 5;
  const approaches = [
    { name: 'Original Ultra-Minimal', scorer: 0 },
    { name: 'Enhanced Ultra-Minimal', scorer: 0 },
    { name: 'Two-Stage', scorer: 0 },
    { name: 'Hybrid', scorer: 0 }
  ];
  
  // Personality markers to check
  const personalityMarkers = {
    directness: ['fluff', 'hello', 'great question', 'wonderful'],  // Should NOT appear
    clinical: ['pathophysiology', 'clinical', 'mechanism', 'finding'], // SHOULD appear
    structure: ['THE MONEY FINDING', '**', 'TRAP ANALYSIS'],  // SHOULD appear
    tone: ['Nice', 'exactly how top scorers'],  // SHOULD appear appropriately
  };
  
  // Run tests and score...
  
  return approaches;
}

// IMPLEMENTATION: Use in your API route
export async function POST(request: NextRequest) {
  const { approach, question, userAnswer, messages, isInitial } = await request.json();
  
  const state = {
    mode: userAnswer === question.answer ? 'RIGHT_ANSWER' : 'WRONG_ANSWER',
    currentStep: determineCurrentStep(messages.length, userAnswer === question.answer),
    correctAnswer: question.answer,
    userAnswer: userAnswer,
    questionType: question.type
  };
  
  let prompt;
  switch(approach) {
    case 'enhanced-ultra-minimal':
      prompt = generateEnhancedUltraMinimalPrompt(state, question);
      break;
    case 'two-stage':
      prompt = generateTwoStagePrompt(state, question, messages.length === 0);
      break;
    case 'hybrid':
      prompt = generateHybridPrompt(state, question, messages.length);
      break;
    default:
      prompt = generateEnhancedUltraMinimalPrompt(state, question);
  }
  
  // Call your LLM with the prompt
  const response = await callLLM(prompt);
  
  return NextResponse.json({
    response: response.text,
    tokens: Math.ceil(prompt.length / 4),
    approach: approach
  });
}

// Helper: Determine current step based on message count
function determineCurrentStep(messageCount: number, isCorrect: boolean): string {
  const wrongSteps = ['INQUIRY', 'TEACH', 'CONFIRMATION', 'COMPLETED'];
  const rightSteps = ['METACOGNITIVE', 'TECHNIQUE_ANALYSIS', 'INTEGRATION', 'EXPERT_MODEL', 'WHAT_NOW', 'COMPLETED'];
  
  const steps = isCorrect ? rightSteps : wrongSteps;
  const stepIndex = Math.min(Math.floor(messageCount / 2), steps.length - 1);
  
  return steps[stepIndex];
}
